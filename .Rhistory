devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
#' Rows with norms greater than or equal to the `q`-th quantile are returned as truncation locations.
#' This is used as a preprocessing step for robust covariance estimation or functional data truncation.
#'
#' @examples
#' # Simulate functional data
#' set.seed(123)
#' data <- matrix(rnorm(50*100), nrow = 50, ncol = 100)
#' quantile_truncation(data, q = 0.95)
#'
#' @export
quantile_truncation <- function(data, q) {
# Compute Euclidean norm for each row
norms.data <- apply(data, 1, function(row) sqrt(sum(row^2)))
# Determine quantile threshold
quant <- quantile(norms.data, probs = q)
# Identify indices of points exceeding the threshold
truncation.locations <- which(norms.data >= quant)
return(truncation.locations)
}
#' Rows with norms greater than or equal to the `q`-th quantile are returned as truncation locations.
#' This is used as a preprocessing step for robust covariance estimation or functional data truncation.
#'
#' @examples
#' # Simulate functional data
#' set.seed(123)
#' data <- matrix(rnorm(50*100), nrow = 50, ncol = 100)
#' quantile_truncation(data, q = 0.95)
#'
#' @export
quantile_truncation <- function(data, q) {
# Compute Euclidean norm for each row
norms.data <- apply(data, 1, function(row) sqrt(sum(row^2)))
# Determine quantile threshold
quant <- quantile(norms.data, probs = q)
# Identify indices of points exceeding the threshold
truncation.locations <- which(norms.data >= quant)
return(truncation.locations)
}
res_laplace = run_mc_simulation <- function(nx = 100, nt = 101, K = 100, sigma = 1, lambda = 2, kappa = 0.5,
Delta = 0.01, sd = 3, rho = 0.95, kernel = function(h) exp(-abs(h)))
devtools::load_all()
res_laplace <- run_mc_simulation <- function(nx = 100, nt = 101, K = 100, sigma = 1, lambda = 2, kappa = 0.5, Delta = 0.01, sd = 3, rho = 0.95, kernel = function(h) exp(-abs(h)))
run_mc_simulation
run_mc_simulation
run_mc_simulation
devtools::document()
devtools::load_all()
